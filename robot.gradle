apply plugin: 'org.ysb33r.doxygen'
apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'edu.wpi.first.GradleRIO'

ext {
	teamID = teamNum
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
	targets {
		roboRIO("roborio") {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = teamNum
		}
	}

	artifacts {
		frcNativeArtifact('frcCpp') {
			targets << "roborio"
			component = "${nativeName}"
			// Debug can be overridden by command line, for use with VSCode
			debug = frc.getDebugOrDefault(false)
		}
		// Built in artifact to deploy arbitrary files to the roboRIO.
		fileTreeArtifact('frcStaticFileDeploy') {
			// The directory below is the local directory to deploy
			files = fileTree(dir: 'src/main/deploy')
			// Deploy to RoboRIO target, into /home/lvuser/deploy
			targets << "roborio"
			directory = '/home/lvuser/deploy'
		}
	}
}

// Enable simulation gui support. Must check the box in vscode to enable support
// upon debugging
dependencies {
	simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
	simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)
}

// Simulation configuration (e.g. environment variables).
sim {
	// Sets the websocket client remote host.
	// envVar "HALSIMWS_HOST", "10.0.0.2"
}

model {
	components {

		treasureMapper(NativeLibrarySpec) {
			if (includeDesktopSupport) {
				targetPlatform wpi.platforms.desktop
			}
			targetPlatform wpi.platforms.roborio

			sources {
				cpp {
					source {
						srcDir 'TreasureMapper/cpp'
						include '**/*.cpp', '**/*.cc'
					}

					exportedHeaders {
						srcDir rootProject.file('TreasureMapper/include')
					}
				}
			}
		}
		
		"${nativeName}"(NativeExecutableSpec) { // frc user
			targetPlatform wpi.platforms.roborio
			if (includeDesktopSupport) {
				targetPlatform wpi.platforms.desktop
			}

			sources.cpp {
				source {
					srcDir 'src/main/cpp' // robot
					include '**/*.cpp', '**/*.cc'
				}

				exportedHeaders {
					srcDir 'src/main/include' // robot

					if (includeSrcInIncludeRoot) {
						srcDir 'src/main/cpp' // robot
					}
				}
			}

			binaries.all {
				if (includeDesktopSupport) {
					cppCompiler.define "WML_DESKTOP_SUPPORT"
				}

				lib library: 'treasureMapper', linkage: 'shared'
			}

			// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
			wpi.deps.vendor.cpp(it)
			wpi.deps.wpilib(it)
		} // frc user
	}

	testSuites {
		"${nativeName}Test"(GoogleTestTestSuiteSpec) {
			for(NativeComponentSpec c : $.components) {
				if (c.name == nativeName) {
					testing c
					break
				}
			}

			sources.cpp {
				source {
					srcDir 'src/test/cpp'
					include '**/*.cpp'
				}
			}

			binaries.all {
				if (includeDesktopSupport) {
					cppCompiler.define "WML_DESKTOP_SUPPORT"
				}
				lib library: 'treasureMapper', linkage: 'shared'
			}

			wpi.deps.vendor.cpp(it)
			wpi.deps.wpilib(it)
			wpi.deps.googleTest(it)
		}
	}
}

task sim(dependsOn: "simulate${nativeName}${wpi.platforms.desktop.capitalize()}DebugExecutable")

doxygen {
	executables {
		doxygen version : '1.8.13'
	}

	generate_html true
	source project.file('src/main/include')
	outputDir new File(buildDir,"docs/doxygen/${nativeName}")
}